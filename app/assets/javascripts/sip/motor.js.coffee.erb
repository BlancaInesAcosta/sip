# vim: set expandtab tabstop=2 shiftwidth=2 fileencoding=utf-8:
# 
# Por compartir entre motores que operen sobre sip

#//= require jquery
#//= require jquery_ujs
#//= require jquery-ui/widgets/autocomplete
#//= require bootstrap-datepicker
#//= require twitter/bootstrap
#//= require turbolinks
#//= require chosen-jquery
#//= require sip/geo


# HTML

# Remplaza las opciones de un cuadro de seleccion por unas nuevas
# @idsel es identificación del select
# @nuevasop Son las nuevas opciones
# @usachosne Es verdadero si y solo si el cuadro de selección usa chosen
# @cid campo id en cada elemento de @nuevasop
# @cnombre campo nombre en cada elemento de @nuevasop
@sip_remplaza_opciones_select = (idsel, nuevasop, usachosen = false, cid = 'id',
  cnombre = 'nombre') ->
  porelim = [] 
  yaesta = []
  $('#' + idsel).children().each( (i, e) ->
    esta = false
    vac = $(e).val()
    $.each( nuevasop, ( j, nelem ) -> 
      if nelem[cid] == vac 
        esta = true
    )
    if !esta
      porelim.push(i)
    else
      yaesta.push(vac)
  )
  $.each(porelim, (i,p) -> 
    $('#'+idsel).children(i).remove()
  )
  $.each(nuevasop, (j, nelem) ->
    esta = false
    $.each(yaesta, (i, v) ->
      if v == nelem[cid]
        esta = true
    )
    if !esta
      $('#'+idsel).append(
        '<option value="' + nelem[cid] + '">' + nelem[cnombre] + '</option>')
  )
  if usachosen
    $('#' + idsel).trigger("chosen:updated");

# JAVASCRIPT

# Añade endsWith a la clase String
# http://stackoverflow.com/questions/280634/endswith-in-javascript
if (typeof String.prototype.endsWith != 'function') 
  String.prototype.endsWith = (suffix) ->
    return this.indexOf(suffix, this.length - suffix.length) != -1

# Verifica que una fecha sea válida
# De: http://stackoverflow.com/questions/8098202/javascript-detecting-valid-dates
@fecha_valida = (text) ->
  date = Date.parse(text)
  if (isNaN(date))
      return false
  comp = text.split('-')
  if (comp.length != 3)
    return false;

  y = parseInt(comp[0], 10)
  m = parseInt(comp[1], 10)
  d = parseInt(comp[2], 10)
  date = new Date(y, m - 1, d);
  return (date.getFullYear() == y && 
    date.getMonth() + 1 == m && date.getDate() == d);



# AJAX

# Envía con ajax a la ruta especificada junto con los datos, espera
# respuesta html de la cual extrae una parte con selector selresp y
# lo usa para volver a pintar el elemento con selector selelem
@sip_envia_ajax_datos_ruta_y_pinta= (ruta, datos, selresp, selelem, metodo='GET', tipo='html' ) ->
  root =  window
  t = Date.now()
  d = -1
  if (root.sip_envia_ajax_t)
    d = (t - root.sip_envia_ajax_t)/1000
  root.sip_envia_ajax_t = t
  if (d == -1 || d > 2)
    sip_arregla_puntomontaje(root)
    rutac = root.puntomontaje + ruta + ".js"
    $.ajax({
      url: rutac, 
      data: datos, 
      dataType: tipo,
      method: metodo
    }).fail( (jqXHR, texto) ->
      alert("Error con ajax a " + rutac + ": " + texto)
    ).done( (e, r) ->
      if selresp != '' && selelem != ''
        t=$(e).find(selresp)[0]
        $(selelem).html(t)
      return
    )
  return
  
# Envia con AJAX datos del formulario, junto con el botón submit,
# evitando duplicaciones.
# @param f      Formulario jquery-sado
# @param metodo GET, POST, PUT
# @param tipo   json, script, xml o html (html puede ser interceptado
#   por redirect_to con turbolinks y presentado automáticamente en navegador)
# @param alertaerror Presentar alerta en caso de error (true/false)
# @param vcommit Valor para commit
#
@sip_enviarautomatico_formulario = (f, metodo='GET', tipo='script', 
  alertaerror=true, vcommit='Enviar') ->
  root =  window
  t = Date.now()
  d = -1
  if (root.sip_enviarautomatico_t)
    d = (t - root.sip_enviarautomatico_t)/1000
  root.sip_enviarautomatico_t = t
  # NO se permite mas de un envio en 2 segundos 
  if (d == -1 || d > 2)
    a = f.attr('action')
    vd = f.serializeArray()
    vd.push({name: 'commit', value: vcommit})
    vd.push({name: '_sip_enviarautomatico', value: 1})
    d = $.param(vd)
    # En ocasiones lanza 2 veces seguidas el mismo evento. 
    # Evitamos enviar lo mismo.
    if (!root.dant || root.dant != d)
      root.dant = d 
      $.ajax({
        url: a, 
        data: d, 
        method: metodo, 
        dataType: tipo
      }).fail( (jqXHR, texto) ->
        if alertaerror
          alert("Error con AJAX: " + texto)
      )
  return

# Cambio un campo select con base en valor de otro campo
# $elem Elemento jquery del otro campo (opciones de select dependen)
# idsel Id. del select por modificar
# rutajson Ruta del API que respondera JSON (sin punto de montaje)
# nomparam Parametro para el API JSON que irá con el valor de $elem
# descerr  Descripcion por presentar en caso de que el JSON no responda
# root     Donde se almacenan objetos globales
# paramfiltro   Enviar parámetro de la forma { filtro: { nomparam: val} } 
# cid     campo en el JSON resultantes de la consulta AJAX que corresponderá al id de cada elemento del campo de seleccion
# cnombre campo en el JSON resultante de la consula AJAX que corresponderá al nombre de cada elemento del campo de seleccion (si es presenta_nombre además pasará parametro presenta_nombre al hacer la consulta para que el controlador responda con presenta_nombre de Sip::Modelo)
# f Funcion por llamar despues de cambiar el cuadro de seleccion
@sip_llena_select_con_AJAX = ($elem, idsel, rutajson, nomparam, descerr, root = window, paramfiltro = false, cid = 'id', cnombre = 'nombre', f = null) ->
  sip_arregla_puntomontaje(root)
  t = Date.now()
  d = -1
  if (root.sip_llena_select_con_AJAX_t)
    d = (t - root.sip_llena_select_con_AJAX_t)/1000
  root.sip_llena_select_con_AJAX_t = t
  # NO se permite mas de un envio en 2 segundos 
  if (d > 0 && d <= 2)
    return

  val = $elem.val()
  param = {}
  param[nomparam] = val
  if cnombre == 'presenta_nombre'
    param['presenta_nombre'] = 1
  if paramfiltro
    param = {filtro: param}
  x = $.getJSON(root.puntomontaje + rutajson, param)
  x.done((data) ->
    sip_remplaza_opciones_select(idsel, data, true, cid, cnombre)
    if f != null
      f(root)
  )
  x.error((m1, m2, m3) -> 
    alert(
      'Problema ' + descerr + '. ' + param + ' ' + m1 + ' ' + m2 + ' ' + m3)
    )

# AUTOCOMPLETACIÓN

# Para autocompletación busca regitros que coincidan con lo ingresado por 
#   usuario en el campo s
#
# @param s {object} es campo texto con foco donde se busca 
# @param sel_id {string} selector de campo donde quedará identificación 
# @param fuente {mixed} arreglo, url o función que busca y retorna
#  datos de la forma label: 'l1', value: 'v1' 
#
# @return {void}
@busca_gen= (s, sel_id, fuente) ->
  s.autocomplete({
    source: fuente,
    minLength: 2,
    select: ( event, ui ) -> 
      if (ui.item) 
        $(sel_id).val(ui.item.value) if sel_id != null
        s.val(ui.item.label)
        event.stopPropagation()
        event.preventDefault()
  })
  return



# PERSONA
# Elije una persona en autocompletación
@autocompleta_persona = (label, id, id_victima, divcp) ->
  cs = id.split(";")
  id_persona = cs[0]
  pl = []
  ini = 0
  for i in [0..cs.length] by 1
     t = parseInt(cs[i])
     pl[i] = label.substring(ini, ini + t)
     ini = ini + t + 1
  # pl[1] cnom, pl[2] es cape, pl[3] es cdoc
  d = "id_victima=" + id_victima
  d += "&id_persona=" + id_persona
  a = '/personas/remplazar'
  $.ajax(url: a, data: d, dataType: "html").fail( (jqXHR, texto) ->
    alert("Error con ajax " + texto)
  ).done( (e, r) ->
    divcp.html(e)
    return
  )
  return

# Busca persona por nombre, apellido o identificación
# s es objeto con foco donde se busca persona
@busca_persona_nombre = (s) ->
  cnom = s.attr('id')
  v = $("#" + cnom).data('autocompleta')
  if (v != 1 && v != "no") 
    $("#" + cnom).data('autocompleta', 1)
    divcp = s.closest('.campos_persona')
    if (typeof divcp == 'undefined' || divcp.length == 0)
      alert('No se ubico .campos_persona')
      return
    idvictima = divcp.parent().find('.caso_victima_id').find('input').val()
    if (typeof idvictima == 'undefined')
      alert('No se ubico .caso_victima_id')
      return
    $("#" + cnom).autocomplete({
      source: "/personas.json",
      minLength: 2,
      select: ( event, ui ) -> 
        if (ui.item) 
          autocompleta_persona(ui.item.value, ui.item.id, idvictima, divcp)
          event.stopPropagation()
          event.preventDefault()
    })
  return

# SIP

# Pone / al final de root.puntomontaje (que debe corresponder al
# punto de montaje de la aplicación) o lo inicializa en / si no hay
#
# @param root espacio para poner variables globales
@sip_arregla_puntomontaje = (root) ->
  root.puntomontaje = '/' if typeof root.puntomontaje == 'undefined'
  root.puntomontaje += '/' if root.puntomontaje[root.puntomontaje.length-1] != '/'

# Prepara eventos comunes al usar sip
# @param root espacio para poner variables globales
@sip_prepara_eventos_comunes = (root, sincoord = false) ->
  # Arreglar punto de montaje de la aplicacion
  root.puntomontaje = "<%= ENV['RAILS_RELATIVE_URL_ROOT'] ? ENV['RAILS_RELATIVE_URL_ROOT'] : Rails.configuration.relative_url_root %>"
  sip_arregla_puntomontaje(root)
  # Formularios con departamento/municipio sin llenar autom. coordenadas
  root.sip_sincoord = false;

  #<% puts  "formato_fecha: ", Rails.configuration.x.formato_fecha %>
  #<% puts  "relative_url_root: ", Rails.configuration.relative_url_root %>
  # Formato de campos de fecha con datepicker
  root.formato_fecha = '<%= Rails.configuration.x.formato_fecha && Rails.configuration.x.formato_fecha.to_s != "{}"  ? Rails.configuration.x.formato_fecha.to_s : "yyyy-mm-dd" %>'

  $('[data-behaviour~=datepicker]').datepicker({
    format: root.formato_fecha,
    autoclose: true,
    todayHighlight: true,
    language: 'es'	
  })

  $('[data-toggle="tooltip"]').tooltip()
  $(document).on('cocoon:after-insert', (e) ->
    $('[data-behaviour~=datepicker]').datepicker({
      format: root.formato_fecha
      autoclose: true
      todayHighlight: true
      language: 'es'
    })
    $('[data-toggle="tooltip"]').tooltip()
  )

  # Chosen-jquery 
  $('.chosen-select').chosen
    allow_single_deselect: true
    no_results_text: 'No hay resultados',
    placeholder_text_single: 'Seleccióne una opción',
    placeholder_text_multiple: 'Selecciones algunas opciones',
    width: '100%'

  # Tooltips con chosen  
  $('select[data-toggle="tooltip"]').each( (v, e) ->
    ej = $(e)
    t = ej.attr('data-original-title')
    id = ej.attr('id')  
    ns = '#' + id+'_chosen .chosen-choices'
    $(ns).attr('title', t)
    $(ns).attr('data-toggle', 'tooltip')
  )

  jQuery ->
    $("a[rel~=popover], .has-popover").popover()
    $("a[rel~=tooltip], .has-tooltip").tooltip()

  # Al cambiar país se recalcula lista de departamentos
  $(document).on('change', 'select[id$=_id_pais]', (e) ->
    llena_departamento($(this), root, sincoord)
  )
  $(document).on('change', 'select[id$=_pais_id]', (e) ->
    llena_departamento($(this), root, sincoord)
  )

  # Al cambiar departamento se recalcula lista de municipios
  $(document).on('change', 'select[id$=_id_departamento]', (e) ->
    llena_municipio($(this), root, sincoord)
  )
  $(document).on('change', 'select[id$=_departamento_id]', (e) ->
    llena_municipio($(this), root, sincoord)
  )

  # Al cambiar municipio se recalcula lista de centros poblados
  $(document).on('change', 'select[id$=_id_municipio]', (e) ->
    llena_clase($(this), root, sincoord)
  )
  $(document).on('change', 'select[id$=_municipio_id]', (e) ->
    llena_clase($(this), root, sincoord)
  )

  # Al cambiar centro poblado se deja tipo de ubicación en Urbano
  $(document).on('change', 'select[id$=_id_clase]', (e) ->
    pone_tipourbano($(this))
  )
  $(document).on('change', 'select[id$=_clase_id]', (e) ->
    pone_tipourbano($(this))
  )


  $('#mundep').on('focusin', (e) ->
    sip_arregla_puntomontaje(root)
    busca_gen($(this), null, root.puntomontaje + "/mundep.json")
  )

  $(document).on('click', 'a.enviarautomatico[href^="#"]', (e) ->
    sip_enviarautomatico_formulario($('form'), 'POST', 'json', false)
    return
  )

  $(document).on('change', 'select[data-enviarautomatico]', 
    (e) -> 
      sip_enviarautomatico_formulario($(e.target.form))
  )
  $(document).on('change', 'input[data-enviarautomatico]', 
    (e) -> 
      #debugger
      # No procesa selección de fecha, pero si cuando se teclea
      #if typeof $(e.target).attr('data-behaviour') == 'undefined' || e.bubbles
      sip_enviarautomatico_formulario($(e.target.form))
  )

  # Rotador: http://blog.emaillenin.com/2014/06/showing-a-spinnerloading-cursor-icon-for-rails-4-turbolink.html
  iniciaRotador = ->
    $("html").css "cursor", "progress"
    return

  detieneRotador = ->
    $("html").css "cursor", "auto"
    return

  $(document).on('turbolinks:click', (event) ->
    if event.target.getAttribute('href').charAt(0) == '#'
      return event.preventDefault()
  )

  $(document).on "page:fetch", iniciaRotador

  $(document).on "page:receive", detieneRotador

  return


